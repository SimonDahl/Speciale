
f√∏rste test: 

def sho(t,y):
    m = np.random.uniform(0.1, 2)
    k = np.random.uniform(3, 10)
    c = np.random.uniform(0, 1)
    solution = (y[1],(-(c/m)*y[1]-(k/m)*y[0]))
    return solution

train = np.zeros((n_sols,timesteps))
t = np.linspace(0,time_limit,timesteps)

for i in range(n_sols):
    y_init = [np.random.uniform(1,3),np.random.uniform(0,1)]
    solution = solve_ivp(sho, [0,timesteps], y0 = y_init, t_eval = t)
    sol_data = solution.y[0]
    train[i,:] = sol_data
print('### DATA GENERATION COMPLETE ###')

test 2 

def sho(t,y):
    m = np.random.uniform(0.1, 2)
    k = np.random.uniform(3, 10)
    c = np.random.uniform(0, 1)
    solution = (y[1],(-(c/m)*y[1]-(k/m)*y[0]))
    return solution

train = np.zeros((n_sols,timesteps))
t = np.linspace(0,time_limit,timesteps)

for i in range(n_sols):
    y_init = [np.random.uniform(1,10),np.random.uniform(-2,2)]
    solution = solve_ivp(sho, [0,timesteps], y0 = y_init, t_eval = t)
    sol_data = solution.y[0]
    train[i,:] = sol_data
print('### DATA GENERATION COMPLETE ###')